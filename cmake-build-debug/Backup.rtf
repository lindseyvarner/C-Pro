{\rtf1\ansi\ansicpg1252\cocoartf2707
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fmodern\fcharset0 Courier-Bold;\f2\fmodern\fcharset0 Courier-Oblique;
}
{\colortbl;\red255\green255\blue255;\red109\green111\blue5;\red15\green112\blue3;\red25\green68\blue35;
\red0\green0\blue254;\red0\green0\blue109;\red109\green109\blue109;\red41\green15\blue109;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c43529\c1961;\csgenericrgb\c5882\c43922\c1176;\csgenericrgb\c9804\c26667\c13725;
\csgenericrgb\c0\c0\c99608;\csgenericrgb\c0\c0\c42745;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c16078\c5882\c42745;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 #include 
\f1\b \cf3 <stdio.h>\

\f0\b0 \cf2 #include 
\f1\b \cf3 <stdlib.h>\

\f0\b0 \cf2 #include 
\f1\b \cf3 <string.h>\

\f0\b0 \cf2 #include 
\f1\b \cf3 <ctype.h>\

\f0\b0 \cf2 #define 
\f1\b \cf4 MAX 
\f0\b0 \cf5 129\
\

\f1\b \cf6 int 
\f0\b0 \cf0 countWords(
\f1\b \cf6 char
\f0\b0 \cf0 * line, 
\f1\b \cf6 int
\f0\b0 \cf0 * wordIndices) \{\
    
\f1\b \cf6 int 
\f0\b0 \cf0 count = \cf5 0\cf0 ;\
    
\f1\b \cf6 int 
\f0\b0 \cf0 currentIndex = \cf5 0\cf0 ;\
    
\f1\b \cf6 int 
\f0\b0 \cf0 lineLength = strlen(line);\
\
    
\f1\b \cf6 for 
\f0\b0 \cf0 (
\f1\b \cf6 int 
\f0\b0 \cf0 i = \cf5 0\cf0 ; i < lineLength; i++) \{\
        
\f1\b \cf6 if 
\f0\b0 \cf0 (line[i] != 
\f1\b \cf3 ' '
\f0\b0 \cf0 ) \{\
            
\f2\i \cf7 // If this is the first character of a new word, record its index\
            
\f1\i0\b \cf6 if 
\f0\b0 \cf0 (currentIndex == \cf5 0 \cf0 || line[currentIndex - \cf5 1\cf0 ] == 
\f1\b \cf3 ' '
\f0\b0 \cf0 ) \{\
                wordIndices[count] = i;\
                count++;\
            \}\
            currentIndex++;\
        \} 
\f1\b \cf6 else 
\f0\b0 \cf0 \{\
            
\f2\i \cf7 // Delete extra spaces\
            
\f1\i0\b \cf6 while 
\f0\b0 \cf0 (line[i + \cf5 1\cf0 ] == 
\f1\b \cf3 ' '
\f0\b0 \cf0 ) \{\
                i++;\
            \}\
        \}\
    \}\
    
\f1\b \cf6 return 
\f0\b0 \cf0 count;\
\}\
\

\f1\b \cf6 int 
\f0\b0 \cf0 compare(
\f1\b \cf6 const void 
\f0\b0 \cf0 *a, 
\f1\b \cf6 const void 
\f0\b0 \cf0 *b) \{\
    
\f1\b \cf6 char 
\f0\b0 \cf0 *s1 = *(
\f1\b \cf6 char 
\f0\b0 \cf0 **)a;\
    
\f1\b \cf6 char 
\f0\b0 \cf0 *s2 = *(
\f1\b \cf6 char 
\f0\b0 \cf0 **)b;\
    
\f1\b \cf6 return 
\f0\b0 \cf0 strcmp(s1, s2);\
\}\
\

\f1\b \cf6 int 
\f0\b0 \cf0 main(
\f1\b \cf6 int 
\f0\b0 \cf0 argc, 
\f1\b \cf6 char 
\f0\b0 \cf0 *argv[]) \{\
    \cf8 FILE \cf0 *fileptr;\
    
\f1\b \cf6 char 
\f0\b0 \cf0 line[
\f1\b \cf4 MAX
\f0\b0 \cf0 ];\
    
\f1\b \cf6 char 
\f0\b0 \cf0 **lines;\
    
\f1\b \cf6 int 
\f0\b0 \cf0 i, lineCount;\
    
\f1\b \cf6 char 
\f0\b0 \cf0 *filename;\
    
\f1\b \cf6 int 
\f0\b0 \cf0 startingWord = \cf5 0\cf0 ;\
    
\f1\b \cf6 int 
\f0\b0 \cf0 wordIndices[
\f1\b \cf4 MAX
\f0\b0 \cf0 ];\
\
    
\f1\b \cf6 if 
\f0\b0 \cf0 (argc > \cf5 3\cf0 ) \{\
        fprintf(
\f1\b \cf4 stderr
\f0\b0 \cf0 , 
\f1\b \cf3 "Error: Bad command line parameters\cf6 \\n\cf3 "
\f0\b0 \cf0 );\
        exit(\cf5 1\cf0 );\
    \}\
\
    
\f1\b \cf6 if 
\f0\b0 \cf0 (argc == \cf5 2\cf0 ) \{\
        filename = argv[\cf5 1\cf0 ];\
    \} 
\f1\b \cf6 else if 
\f0\b0 \cf0 (argc == \cf5 3\cf0 ) \{\
        
\f1\b \cf6 if 
\f0\b0 \cf0 (argv[\cf5 1\cf0 ][\cf5 0\cf0 ] == 
\f1\b \cf3 '-'
\f0\b0 \cf0 ) \{\
            startingWord = atoi(argv[\cf5 1\cf0 ] + \cf5 1\cf0 );\
            filename = argv[\cf5 2\cf0 ];\
        \} 
\f1\b \cf6 else 
\f0\b0 \cf0 \{\
            fprintf(
\f1\b \cf4 stderr
\f0\b0 \cf0 , 
\f1\b \cf3 "Error: Bad command line parameters\cf6 \\n\cf3 "
\f0\b0 \cf0 );\
            exit(\cf5 1\cf0 );\
        \}\
    \}\
\
    fileptr = fopen(filename, 
\f1\b \cf3 "r"
\f0\b0 \cf0 );\
    
\f1\b \cf6 if 
\f0\b0 \cf0 (fileptr == 
\f1\b \cf4 NULL
\f0\b0 \cf0 ) \{\
        fprintf(
\f1\b \cf4 stderr
\f0\b0 \cf0 , 
\f1\b \cf3 "Error: Cannot open file %s\cf6 \\n\cf3 "
\f0\b0 \cf0 , filename);\
        exit(\cf5 1\cf0 );\
    \}\
\
    lineCount = \cf5 0\cf0 ;\
    lines = 
\f1\b \cf4 NULL
\f0\b0 \cf0 ;\
    
\f1\b \cf6 while 
\f0\b0 \cf0 (fgets(line, 
\f1\b \cf4 MAX
\f0\b0 \cf0 , fileptr) != 
\f1\b \cf4 NULL
\f0\b0 \cf0 ) \{\
        
\f2\i \cf7 /*if (line[strlen(line) - 1] != '\\n') \{\
            fprintf(stderr, "Line too long\\n");\
            printf("String length: %lu", strlen(line));\
            exit(1);\
        \}*/\
        
\f0\i0 \cf0 lineCount++;\
        lines = realloc(lines, lineCount * 
\f1\b \cf6 sizeof
\f0\b0 \cf0 (
\f1\b \cf6 char 
\f0\b0 \cf0 *));\
        
\f1\b \cf6 if 
\f0\b0 \cf0 (lines == 
\f1\b \cf4 NULL
\f0\b0 \cf0 ) \{\
            fprintf(
\f1\b \cf4 stderr
\f0\b0 \cf0 , 
\f1\b \cf3 "Error: Malloc failed\cf6 \\n\cf3 "
\f0\b0 \cf0 );\
            exit(\cf5 1\cf0 );\
        \}\
        lines[lineCount - \cf5 1\cf0 ] = malloc(strlen(line) + \cf5 1\cf0 );\
        
\f1\b \cf6 if 
\f0\b0 \cf0 (lines[lineCount - \cf5 1\cf0 ] == 
\f1\b \cf4 NULL
\f0\b0 \cf0 ) \{\
            fprintf(
\f1\b \cf4 stderr
\f0\b0 \cf0 , 
\f1\b \cf3 "Error: Malloc failed\cf6 \\n\cf3 "
\f0\b0 \cf0 );\
            exit(\cf5 1\cf0 );\
        \}\
        
\f1\b \cf4 strcpy
\f0\b0 \cf0 (lines[lineCount - \cf5 1\cf0 ], line);\
    \}\
\
    qsort(lines, lineCount, 
\f1\b \cf6 sizeof
\f0\b0 \cf0 (
\f1\b \cf6 char 
\f0\b0 \cf0 *), compare);\
\
    
\f1\b \cf6 for 
\f0\b0 \cf0 (i = \cf5 0\cf0 ; i < lineCount; i++) \{\
        
\f1\b \cf6 int 
\f0\b0 \cf0 wordCount = countWords(lines[i], wordIndices);\
        
\f1\b \cf6 if 
\f0\b0 \cf0 (startingWord >= wordCount) \{\
            startingWord = \cf5 0\cf0 ;\
        \}\
        
\f1\b \cf6 char 
\f0\b0 \cf0 *wordToCompare = lines[i] + wordIndices[startingWord];\
        printf(
\f1\b \cf3 "%s"
\f0\b0 \cf0 , wordToCompare);\
        free(lines[i]);\
    \}\
    free(lines);\
\
    fclose(fileptr);\
\
    
\f1\b \cf6 return 
\f0\b0 \cf5 0\cf0 ;\
\}\
\
\
\
\
\
\
}